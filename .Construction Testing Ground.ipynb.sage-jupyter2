{"backend_state":"ready","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-49646ff2-58d8-4ac9-908d-1697a807353f.json","kernel":"sage-9.2","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"last_ipynb_save":1710866352246,"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"5fee47","input":"","pos":16,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b67fdc","input":"\n","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"368238","input":"load(\"quivers.sage\")\n## gives better understanding, we can mutate 2-3 then 4-5 repeatedly\n\nx = 3\n\nQ = Quiver(matrix(([0, 15, -25, 25, -20],\n                   [-15, 0, 20, x, 25],\n                   [25, -20, 0, x, x],\n                   [-25, -1*x, -1*x, 0, 15],\n                   [20, -25, -1*x, -15, 0])))\n\nfor i in [1..5]:\n    print(isFork(Q.mutate([i]).matrix))\n\n    \nlastMutationStarting3 = 4\nlastMutationStarting4 = 3\nQ3 = Q\nQ4 = Q\n\ndepth = 10\nfor loops in range(depth):\n    works3 = 0\n    works4 = 0\n    for i in [1..5]:\n        if (not works3) and i != lastMutationStarting3 and isFork(Q3.mutate([i]).matrix) == 0:\n            Q3 = Q3.mutate([i])\n            works3 = i\n        if (not works4) and i != lastMutationStarting4 and isFork(Q4.mutate([i]).matrix) == 0:\n            Q4 = Q4.mutate([i])\n            works4 = i\n    print(works3, works4)\n    lastMutationStarting3 = works3\n    lastMutationStarting4 = works4\n","output":{"0":{"name":"stdout","output_type":"stream","text":"1\n2\n0\n0\n5\n3 4\n2 5\n3 4\n2 5\n3 4\n2 5\n3 4\n2 5\n3 4\n2 5\n"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"3cef8f","input":"load(\"quivers.sage\")\n## looking into the 2 forkless part with no source or sink\n## works for n > 2\nn = 5\nsides = [100,100,100,100,100,100]\nfor i in [0..5]:\n    sides[i] = n\n\nsides[1] = 3 ## unsure how this affects forkless part in combo with n, but can work, generally if n >=\nsides[5] = (sides[1] - 1)*n\n\nQ = Quiver(matrix(([0, sides[0],-sides[1], sides[4]],\n                   [-sides[0],0, sides[2],-sides[3]],\n                   [sides[1],-sides[2], 0,  -sides[5]],\n                   [-sides[4],sides[3],sides[5],  0])))\n\nprint(isFork(Q.matrix))\nfor i in [1..4]:\n    print(i, isFork(Q.mutate([i]).matrix))\n    print(Q.mutate([i]).matrix)\n    if i == 1:\n        Qmu1 = Q.mutate([i])\n        for j in [2..4]:\n            print(1,j,isFork(Qmu1.mutate([j]).matrix))\n            print(Qmu1.mutate([j]).matrix)\n\n#print()\n#print(Q.mutate([1]).matrix)\n#print()\n#print(Q.matrix)\nQp = Q.mutate([1]).matrix\nQp = swapNodes(Qp, 2, 4)\nQp = -1 * Qp\n\nprint(Qp == Q.matrix)","output":{"0":{"name":"stdout","output_type":"stream","text":"0\n1 0\n[  0  -5   3  -5]\n[  5   0 -10  -5]\n[ -3  10   0   5]\n[  5   5  -5   0]\n1 2 2\n[  0   5 -47 -30]\n[ -5   0  10   5]\n[ 47 -10   0   5]\n[ 30  -5  -5   0]\n1 3 3\n[  0  25  -3  10]\n[-25   0  10  -5]\n[  3 -10   0  -5]\n[-10   5   5   0]\n1 4 4\n[  0  -5 -22   5]\n[  5   0 -35   5]\n[ 22  35   0  -5]\n[ -5  -5   5   0]\n2 2\n[  0  -5  22   5]\n[  5   0  -5   5]\n[-22   5   0 -35]\n[ -5  -5  35   0]\n3 3\n[  0 -10   3 -25]\n[ 10   0  -5  -5]\n[ -3   5   0  10]\n[ 25   5 -10   0]\n4 4\n[  0  30  47  -5]\n[-30   0   5   5]\n[-47  -5   0  10]\n[  5  -5 -10   0]\nTrue\n"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"46eb0a","input":"load(\"quivers.sage\")\n## gives better understanding, we can mutate 2-3 then 4-5 repeatedly\n## seeing if works for all 0 forkless and possible 1 forkless or 2 forkless\n\n## issue with understanding as if inequality is unsure, defaults to false\n## i.e. if got rid of assume(a > 2), would act as if a is both negative and positive\n\n# c>=b>=a\n\nforget()\na,b,c,x = var('a,b,c,x')\n\nassume(x > 1)\nassume(a > 2)\nassume(b > a)\nassume(c > b)\nassume(c-b*a > b)\nassume(c-b*a > a)\n\nQ = Quiver(matrix(([0, a, -c, c, -b],\n                   [-a, 0, b, x, c],\n                   [c, -b, 0, x, x],\n                   [-c, -1*x, -1*x, 0, a],\n                   [b, -c, -1*x, -a, 0])))\n\nprint(Q.matrix)\nprint()\nQp = Q.mutate([3])\nQpp = Qp.mutate([2])\nQppp = Qpp.mutate([3])\nprint(Qp.matrix)\nprint(isFork(Qp.matrix))\nprint()\nprint(Qpp.matrix)\nprint(isFork(Qpp.matrix))\nprint()\nprint(Qppp.matrix)\nprint(isFork(Qppp.matrix))","output":{"0":{"name":"stdout","output_type":"stream","text":"[ 0  a -c  c -b]\n[-a  0  b  x  c]\n[ c -b  0  x  x]\n[-c -x -x  0  a]\n[ b -c -x -a  0]\n\n"},"1":{"name":"stdout","output_type":"stream","text":"[                0 -b*c^2/abs(c) + a                 c                 c                -b]\n[ b^2*c/abs(b) - a                 0                -b  b^2*x/abs(b) + x  b^2*x/abs(b) + c]\n[               -c                 b                 0                -x                -x]\n[               -c -b*x^2/abs(x) - x                 x                 0                 a]\n[                b -b*x^2/abs(x) - c                 x                -a                 0]\n"},"2":{"name":"stdout","output_type":"stream","text":"0\n\n[                                                 0                                   b*c^2/abs(c) - a                                                  c                                                  c                                                 -b]\n[                                 -b^2*c/abs(b) + a                                                  0                                                  b                                  -b^2*x/abs(b) - x                                  -b^2*x/abs(b) - c]\n[                                                -c                                                 -b                                                  0                  (b^2*x/abs(b) + x)*b^2/abs(b) - x                  (b^2*x/abs(b) + c)*b^2/abs(b) - x]\n[                                                -c                                   b*x^2/abs(x) + x -(b*x^2/abs(x) + x)^2*b/abs(-b*x^2/abs(x) - x) + x                                                  0                                                  a]\n[                                                 b                                   b*x^2/abs(x) + c -(b*x^2/abs(x) + c)^2*b/abs(-b*x^2/abs(x) - c) + x                                                 -a                                                  0]\n"},"3":{"name":"stdout","output_type":"stream","text":"2\n\n[                                                0                                  b*c^2/abs(c) - a                                                -c                                                 c                                                -b]\n[                                -b^2*c/abs(b) + a                                                 0                                                -b                                 -b^2*x/abs(b) - x                                 -b^2*x/abs(b) - c]\n[                                                c                                                 b                                                 0                -(b^2*x/abs(b) + x)*b^2/abs(b) + x                -(b^2*x/abs(b) + c)*b^2/abs(b) + x]\n[                                               -c                                  b*x^2/abs(x) + x (b*x^2/abs(x) + x)^2*b/abs(-b*x^2/abs(x) - x) - x                                                 0                                                 a]\n[                                                b                                  b*x^2/abs(x) + c (b*x^2/abs(x) + c)^2*b/abs(-b*x^2/abs(x) - c) - x                                                -a                                                 0]\n"},"4":{"name":"stdout","output_type":"stream","text":"2\n"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"883319","input":"load(\"quivers.sage\")\n## want a 1 forkless part st each node has 2 predecessors and 2 successors\n## seeing if the idea that a node can be a semi-sink (only 1 successor) or semi-source is necessary\n\nn = 3\na = 3*n\nb = 3*n\nc = 3*n\nd = 5*n\ne = 5*n\nf = 5*n\ng = 20\nh = 4*n\ni = 3*n\nj = 4*n\n\nQ = Quiver(matrix(([0,a,b,-1*h, -1*i],\n                   [-a,0,c,d,-1*j],\n                   [-1*b,-1*c, 0, e,f],\n                   [h, -1*d,-1*e,0,g],\n                   [i,j,-1*f,-1*g,0])))\n\nm = Q.matrix\nloop = [0,0,0]\nloopCount = 0\nwhile loop[2] < 5:\n    if(m[loop[0], loop[1]] > 0 and m[loop[1], loop[2]] > 0 and m[loop[2], loop[0]] > 0):\n        loopCount += 1\n        print(loop)\n    loop[0] += 1\n    if(loop[0] > 4):\n        loop[0] = 1\n        loop[1] += 1\n        if(loop[1] > 4):\n            loop[1] = 1\n            loop[2] += 1\n\nprint(isFork(Q.matrix))\nfor i in [1..5]:\n    print(isFork(Q.mutate([i]).matrix))\n\nQb = Quiver(Q.matrix.transpose())\nprint(isFork(Qb.matrix))\nfor i in [1..5]:\n    print(isFork(Qb.mutate([i]).matrix))\n    \n## thus we have a 1 forkless part without any psuedosinks or sources, so the construction cannot add such that there are all but one to or from","output":{"0":{"name":"stdout","output_type":"stream","text":"[1, 3, 0]\n[2, 3, 0]\n[2, 4, 0]\n[2, 4, 1]\n[3, 4, 1]\n[4, 1, 2]\n[4, 1, 3]\n[1, 2, 4]\n[1, 3, 4]\n0\n1\n2\n3\n4\n5\n0\n1\n2\n3\n4\n5\n"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"61dafc","input":"load(\"quivers.sage\")\n## trying to understand the 2-3 cycle\n\nx = 3\n\nQ = Quiver(matrix(([0, 15, -25, 25, -20],\n                   [-15, 0, 20, x, 25],\n                   [25, -20, 0, x, x],\n                   [-25, -1*x, -1*x, 0, 15],\n                   [20, -25, -1*x, -15, 0])))\n\nnextMutation = 3\n\nm = Q.matrix\nloop = [0,0,0]\nloopCount = 0\nwhile loop[2] < 5:\n    if(m[loop[0], loop[1]] > 0 and m[loop[1], loop[2]] > 0 and m[loop[2], loop[0]] > 0):\n        loopCount += 1\n        print(loop)\n    loop[0] += 1\n    if(loop[0] > 4):\n        loop[0] = 1\n        loop[1] += 1\n        if(loop[1] > 4):\n            loop[1] = 1\n            loop[2] += 1\n\ndepth = 10\ndisplayQuiver(Q.matrix)\nprint()\nfor loops in range(depth):\n    Q = Q.mutate([nextMutation])\n    displayQuiver(Q.matrix)\n    print()\n    if nextMutation == 3:\n        nextMutation = 2\n    else:\n        nextMutation = 3","output":{"0":{"name":"stdout","output_type":"stream","text":"[1, 2, 0]\n[1, 4, 0]\n[3, 4, 0]\n"},"1":{"data":{"image/png":"66ae51602610fba0c140008450980ef6d615d7fa","text/plain":"Graphics object consisting of 26 graphics primitives"},"exec_count":12,"output_type":"execute_result"},"10":{"name":"stdout","output_type":"stream","text":"\n"},"11":{"data":{"image/png":"d2b580269c650edee8e29aa4a18b4e909c6bdeb6","text/plain":"Graphics object consisting of 26 graphics primitives"},"exec_count":12,"output_type":"execute_result"},"12":{"name":"stdout","output_type":"stream","text":"\n"},"13":{"data":{"image/png":"c555a1d3df671945e4e3ede53177fbc6443fd4a7","text/plain":"Graphics object consisting of 26 graphics primitives"},"exec_count":12,"output_type":"execute_result"},"14":{"name":"stdout","output_type":"stream","text":"\n"},"15":{"data":{"image/png":"fd14fac45e2197aa42a4543f537fafa2e0820790","text/plain":"Graphics object consisting of 26 graphics primitives"},"exec_count":12,"output_type":"execute_result"},"16":{"name":"stdout","output_type":"stream","text":"\n"},"17":{"data":{"image/png":"6ca793f558b490084f071dc45a661e1cbaec7f9e","text/plain":"Graphics object consisting of 26 graphics primitives"},"exec_count":12,"output_type":"execute_result"},"18":{"name":"stdout","output_type":"stream","text":"\n"},"19":{"data":{"image/png":"0dea8c2a39fdc9bc32c2e5778cee10fac66975c1","text/plain":"Graphics object consisting of 26 graphics primitives"},"exec_count":12,"output_type":"execute_result"},"2":{"name":"stdout","output_type":"stream","text":"\n"},"20":{"name":"stdout","output_type":"stream","text":"\n"},"21":{"data":{"image/png":"b7afa76938fd8b218a76199d45c730ef1ed61f94","text/plain":"Graphics object consisting of 26 graphics primitives"},"exec_count":12,"output_type":"execute_result"},"22":{"name":"stdout","output_type":"stream","text":"\n"},"3":{"data":{"image/png":"02081f84ccb8e0f841b7058fd74e4347f2deea83","text/plain":"Graphics object consisting of 26 graphics primitives"},"exec_count":12,"output_type":"execute_result"},"4":{"name":"stdout","output_type":"stream","text":"\n"},"5":{"data":{"image/png":"18003630a0b23af6dbe5328236de2f4c0ced7772","text/plain":"Graphics object consisting of 26 graphics primitives"},"exec_count":12,"output_type":"execute_result"},"6":{"name":"stdout","output_type":"stream","text":"\n"},"7":{"data":{"image/png":"160f3fac037bea5baba7b1f4bb5508dff7e9c18a","text/plain":"Graphics object consisting of 26 graphics primitives"},"exec_count":12,"output_type":"execute_result"},"8":{"name":"stdout","output_type":"stream","text":"\n"},"9":{"data":{"image/png":"f977183df736410dc58dfb096dd22ce03b71ae01","text/plain":"Graphics object consisting of 26 graphics primitives"},"exec_count":12,"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"325442","input":"## brute force finding 4 node 2 forkless part for structures without a source or sink\n## DONT RUN VERY INEFFICENT, but works :)\n## Ran when ending so not wasting time\nmaxSide = 20\nside = [2,2,2,2,2,2]\nsetOf1Forkless = []\nwhile(side[0] < maxSide):\n    Q1 = Quiver(matrix(([0, side[0], -1*side[1], side[2]],\n                        [-1*side[0], 0, side[3], -1*side[4]],\n                        [side[1], -1*side[3], 0, -1*side[5]],\n                        [-1*side[2], side[4], side[5], 0])))\n    Q2 = Quiver(matrix(([0, -1*side[0], -1*side[1], side[2]],\n                        [side[0], 0, side[3], -1*side[4]],\n                        [side[1], -1*side[3], 0, -1*side[5]],\n                        [-1*side[2], side[4], side[5], 0])))\n    if(isFork(Q1.matrix) == 0):\n        nonForks = []\n        for i in [1..4]:\n            if(isFork(Q1.mutate([i]).matrix) == 0):\n                nonForks.append(Q1.mutate([i]).matrix)\n        if(len(nonForks) == 1):\n            Qprime = Quiver(nonForks[0])\n            nonForks = []\n            for i in [1..4]:\n                if(isFork(Qprime.mutate([i]).matrix) == 0):\n                    nonForks.append(Qprime.mutate([i]).matrix)\n            if(len(nonForks) == 1):\n                setOf1Forkless.append([1, Q1.matrix])\n    if(isFork(Q2.matrix) == 0):\n        nonForks = []\n        for i in [1..4]:\n            if(isFork(Q2.mutate([i]).matrix) == 0):\n                nonForks.append(Q2.mutate([i]).matrix)\n        if(len(nonForks) == 1):\n            Qprime = Quiver(nonForks[0])\n            nonForks = []\n            for i in [1..4]:\n                if(isFork(Qprime.mutate([i]).matrix) == 0):\n                    nonForks.append(Qprime.mutate([i]).matrix)\n            if(len(nonForks) == 1):\n                setOf1Forkless.append([1, Q2.matrix])\n    i = 5\n    side[i] += 1\n    while(side[i] > maxSide):\n        side[i] = 2\n        i -= 1\n        if(i >= 0):\n            side[i] += 1\n        else:\n            break\n    if(i == -1):\n        break\nprint(len(setOf1Forkless))","output":{"0":{"name":"stdout","output_type":"stream","text":"0\n"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"2bcfa9","input":"load(\"quivers.sage\")\n## gives better understanding, we can mutate 2-3 then 4-5 repeatedly\n## seeing if works for all 0 forkless and possible 1 forkless or 2 forkless\n\n# c>=b>=a\n\na = 3\nb = 4\nc = 5\nx = 3\n\nQ = Quiver(matrix(([0, a, -c, c, -b],\n                   [-a, 0, b, x, c],\n                   [c, -b, 0, x, x],\n                   [-c, -1*x, -1*x, 0, a],\n                   [b, -c, -1*x, -a, 0])))\n\nfor i in [1..5]:\n    print(isFork(Q.mutate([i]).matrix))\n\n    \nlastMutationStarting3 = 4\nlastMutationStarting4 = 3\nQ3 = Q\nQ4 = Q\n\ndepth = 10\nfor loops in range(depth):\n    works3 = 0\n    works4 = 0\n    for i in [1..5]:\n        if (not works3) and i != lastMutationStarting3 and isFork(Q3.mutate([i]).matrix) == 0:\n            Q3 = Q3.mutate([i])\n            works3 = i\n        if (not works4) and i != lastMutationStarting4 and isFork(Q4.mutate([i]).matrix) == 0:\n            Q4 = Q4.mutate([i])\n            works4 = i\n    print(Q3.matrix, \"\\n\")\n    ##print(Q4.matrix, \"\\n\")\n    lastMutationStarting3 = works3\n    lastMutationStarting4 = works4\n","output":{"0":{"name":"stdout","output_type":"stream","text":"1\n2\n0\n0\n5\n[  0 -17   5   5  -4]\n[ 17   0  -4  15  17]\n[ -5   4   0  -3  -3]\n[ -5 -15   3   0   3]\n[  4 -17   3  -3   0] \n\n[  0  17 -63   5  -4]\n[-17   0   4 -15 -17]\n[ 63  -4   0  57  65]\n[ -5  15 -57   0   3]\n[  4  17 -65  -3   0] \n\n[   0 -235   63    5   -4]\n[ 235    0   -4  213  243]\n[ -63    4    0  -57  -65]\n[  -5 -213   57    0    3]\n[   4 -243   65   -3    0] \n\n[   0  235 -877    5   -4]\n[-235    0    4 -213 -243]\n[ 877   -4    0  795  907]\n[  -5  213 -795    0    3]\n[   4  243 -907   -3    0] \n\n[    0 -3273   877     5    -4]\n[ 3273     0    -4  2967  3385]\n[ -877     4     0  -795  -907]\n[   -5 -2967   795     0     3]\n[    4 -3385   907    -3     0] \n\n[     0   3273 -12215      5     -4]\n[ -3273      0      4  -2967  -3385]\n[ 12215     -4      0  11073  12633]\n[    -5   2967 -11073      0      3]\n[     4   3385 -12633     -3      0] \n\n[     0 -45587  12215      5     -4]\n[ 45587      0     -4  41325  47147]\n[-12215      4      0 -11073 -12633]\n[    -5 -41325  11073      0      3]\n[     4 -47147  12633     -3      0] \n\n[      0   45587 -170133       5      -4]\n[ -45587       0       4  -41325  -47147]\n[ 170133      -4       0  154227  175955]\n[     -5   41325 -154227       0       3]\n[      4   47147 -175955      -3       0] \n\n[      0 -634945  170133       5      -4]\n[ 634945       0      -4  575583  656673]\n[-170133       4       0 -154227 -175955]\n[     -5 -575583  154227       0       3]\n[      4 -656673  175955      -3       0] \n\n[       0   634945 -2369647        5       -4]\n[ -634945        0        4  -575583  -656673]\n[ 2369647       -4        0  2148105  2450737]\n[      -5   575583 -2148105        0        3]\n[       4   656673 -2450737       -3        0] \n\n"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"35afc9","input":"#trying to see if 5 node 1 forkless part form like above\n\n\nload(\"quivers.sage\")\n## looking for 1 forkless part with both 3 cycles 0 non fork\n## done\n\n#the 0 forkless sides in ascending order, want small name\na = [3,4,5]\n\nQ = Quiver(matrix(([0, a[0]*a[1], -2, -1*a[0]*a[0], 2],\n                   [-1*a[0]*a[1], 0, -1*a[1]*a[2], a[0]*a[2], -1*a[2]*a[2]],\n                   [2, a[1]*a[2], 0, -1*a[2]*a[2], 2],\n                   [a[0]*a[0], -1*a[0]*a[2], a[2]*a[2], 0, a[1]*a[2]],\n                   [-2, a[2]*a[2], -2, -1*a[1]*a[2], 0])))\n# print(Q.matrix)\nprint(isFork(Q.matrix))\nfor i in [1..5]:\n    print(isFork(Q.mutate([i]).matrix))","output":{"0":{"name":"stdout","output_type":"stream","text":"0\n1\n2\n3\n4\n5\n"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"0ea489","input":"load(\"quivers.sage\")\n## trying to expand to 5 nodes\nn = 5\nsides = [100,100,100,100,100,100]\nfor i in [0..5]:\n    sides[i] = n\n\nsides[1] = 3\nsides[5] = (sides[1] - 1)*n\n\nQ = Quiver(matrix(([0, sides[0],-sides[1], sides[4]],\n                   [-sides[0],0, sides[2],-sides[3]],\n                   [sides[1],-sides[2], 0,  -sides[5]],\n                   [-sides[4],sides[3],sides[5],  0])))\nconstruction = zero_matrix(5)\nfor i in [0..3]:\n    for j in [0..3]:\n        construction[i,j] = Q.matrix[i,j]\n\n\nfor bitVal in [1..16]:\n    for i in [0..3]:\n        dir = 1\n        if (bitVal & (1 << (i))):\n            dir = -1\n        construction[i,4] = dir*n\n        construction[4,i] = -1*dir*n\n    Q = Quiver(construction)\n    #print(Q.matrix[4])\n    works = not(isFork(Q.matrix))\n    for i in [1..5]:\n        works = works and (isFork(Q.mutate([i]).matrix) != 0 or i == 1)\n        if i == 1:\n            Qmu1 = Q.mutate([i])\n            for j in [2..5]:\n                works = works and (isFork(Qmu1.mutate([j]).matrix) != 0)\n    if works:\n        print(bitVal,\"Works\\n\", Q.matrix)\n\nprint(\"Done\")","output":{"0":{"name":"stdout","output_type":"stream","text":"1 Works\n [  0   5  -3   5  -5]\n[ -5   0   5  -5   5]\n[  3  -5   0 -10   5]\n[ -5   5  10   0   5]\n[  5  -5  -5  -5   0]\n4 Works\n [  0   5  -3   5   5]\n[ -5   0   5  -5   5]\n[  3  -5   0 -10  -5]\n[ -5   5  10   0   5]\n[ -5  -5   5  -5   0]\n5 Works\n [  0   5  -3   5  -5]\n[ -5   0   5  -5   5]\n[  3  -5   0 -10  -5]\n[ -5   5  10   0   5]\n[  5  -5   5  -5   0]\n6 Works\n [  0   5  -3   5   5]\n[ -5   0   5  -5  -5]\n[  3  -5   0 -10  -5]\n[ -5   5  10   0   5]\n[ -5   5   5  -5   0]\n9 Works\n [  0   5  -3   5  -5]\n[ -5   0   5  -5   5]\n[  3  -5   0 -10   5]\n[ -5   5  10   0  -5]\n[  5  -5  -5   5   0]\n10 Works\n [  0   5  -3   5   5]\n[ -5   0   5  -5  -5]\n[  3  -5   0 -10   5]\n[ -5   5  10   0  -5]\n[ -5   5  -5   5   0]\n11 Works\n [  0   5  -3   5  -5]\n[ -5   0   5  -5  -5]\n[  3  -5   0 -10   5]\n[ -5   5  10   0  -5]\n[  5   5  -5   5   0]\n14 Works\n [  0   5  -3   5   5]\n[ -5   0   5  -5  -5]\n[  3  -5   0 -10  -5]\n[ -5   5  10   0  -5]\n[ -5   5   5   5   0]\nDone\n"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"ef9ce2","input":"load(\"quivers.sage\")\n## gives better understanding, we can mutate 2-3 then 4-5 repeatedly\n## seeing if works for all 0 forkless and possible 1 forkless or 2 forkless\n##### IGNORE\n\n# c>=b>=a\n\ns1,s2,s3,s4,s5,s6,s7 = var('s1,s2,s3,s4,s5,s6,s7')\nassume(s1 > 0)\nassume(s2 > s1)\nassume(s3 > s2)\nassume(s4 > s3)\nassume(s5 > s4)\nassume(s6 > s5)\nassume(s7 > s6)\n\nQp = Quiver(matrix(([0, s4, s2, s2, -s3],\n                    [-s4, 0, -s3, s6, s7],\n                    [-s2, s3, 0 , -s1, -s1],\n                    [-s2, -s6, s1, 0, s5],\n                    [s3, -s7, s1, -s5, 0])))\n\nprint(Qp.matrix)\nprint()\nQpp = Qp.mutate([2])\nQppp = Qpp.mutate([3])\nprint(Qp.matrix)\nprint()\nprint(Qpp.matrix)\nprint()\nprint(Qppp.matrix)","output":{"0":{"name":"stdout","output_type":"stream","text":"[  0  s4  s2  s2 -s3]\n[-s4   0 -s3  s6  s7]\n[-s2  s3   0 -s1 -s1]\n[-s2 -s6  s1   0  s5]\n[ s3 -s7  s1 -s5   0]\n\n"},"1":{"name":"stdout","output_type":"stream","text":"[  0  s4  s2  s2 -s3]\n[-s4   0 -s3  s6  s7]\n[-s2  s3   0 -s1 -s1]\n[-s2 -s6  s1   0  s5]\n[ s3 -s7  s1 -s5   0]\n\n[                    0                   -s4                    s2  s4^2*s6/abs(s4) + s2  s4^2*s7/abs(s4) - s3]\n[                   s4                     0                    s3                   -s6                   -s7]\n[                  -s2                   -s3                     0  s3^2*s6/abs(s3) - s1  s3^2*s7/abs(s3) - s1]\n[-s4*s6^2/abs(s6) - s2                    s6 -s3*s6^2/abs(s6) + s1                     0                    s5]\n[-s4*s7^2/abs(s7) + s3                    s7 -s3*s7^2/abs(s7) + s1                   -s5                     0]\n\n[                    0                   -s4                   -s2  s4^2*s6/abs(s4) + s2  s4^2*s7/abs(s4) - s3]\n[                   s4                     0                   -s3                   -s6                   -s7]\n[                   s2                    s3                     0 -s3^2*s6/abs(s3) + s1 -s3^2*s7/abs(s3) + s1]\n[-s4*s6^2/abs(s6) - s2                    s6  s3*s6^2/abs(s6) - s1                     0                    s5]\n[-s4*s7^2/abs(s7) + s3                    s7  s3*s7^2/abs(s7) - s1                   -s5                     0]\n"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"b488b9","input":"load(\"quivers.sage\")\n## trying to expand to 5 nodes\nn = 5\nsides = [100,100,100,100,100,100]\nfor i in [0..5]:\n    sides[i] = n\n\nsides[1] = 6\nsides[5] = (sides[1] - 1)*n\n\nQ = Quiver(matrix(([0, sides[0],-sides[1], sides[4]],\n                   [-sides[0],0, sides[2],-sides[3]],\n                   [sides[1],-sides[2], 0,  -sides[5]],\n                   [-sides[4],sides[3],sides[5],  0])))\n\nsetOfWorking = constructionOf2ForklessPart(Q, n, True)\n\nwhile True:\n    sixNode = constructionOf2ForklessPart(setOfWorking[0], n, True)\n    if(len(sixNode) != 0):\n        # print(sixNode[0].matrix)\n        setOfWorking = [sixNode[0]]\n        print(\"Works For\", sixNode[0].matrix.ncols())\n        print(sixNode[0].matrix)\n        if(sixNode[0].matrix.ncols() >= 20):\n            break\n    else:\n        break\n\nprint(\"Done\")","output":{"0":{"name":"stdout","output_type":"stream","text":"1\n1\nWorks For 6\n[  0   5  -6   5  -5  -5]\n[ -5   0   5  -5   5   5]\n[  6  -5   0 -25   5   5]\n[ -5   5  25   0   5   5]\n[  5  -5  -5  -5   0   5]\n[  5  -5  -5  -5  -5   0]\n1\nWorks For 7\n[  0   5  -6   5  -5  -5  -5]\n[ -5   0   5  -5   5   5   5]\n[  6  -5   0 -25   5   5   5]\n[ -5   5  25   0   5   5   5]\n[  5  -5  -5  -5   0   5   5]\n[  5  -5  -5  -5  -5   0   5]\n[  5  -5  -5  -5  -5  -5   0]\n1\nWorks For 8\n[  0   5  -6   5  -5  -5  -5  -5]\n[ -5   0   5  -5   5   5   5   5]\n[  6  -5   0 -25   5   5   5   5]\n[ -5   5  25   0   5   5   5   5]\n[  5  -5  -5  -5   0   5   5   5]\n[  5  -5  -5  -5  -5   0   5   5]\n[  5  -5  -5  -5  -5  -5   0   5]\n[  5  -5  -5  -5  -5  -5  -5   0]\n1\nWorks For 9\n[  0   5  -6   5  -5  -5  -5  -5  -5]\n[ -5   0   5  -5   5   5   5   5   5]\n[  6  -5   0 -25   5   5   5   5   5]\n[ -5   5  25   0   5   5   5   5   5]\n[  5  -5  -5  -5   0   5   5   5   5]\n[  5  -5  -5  -5  -5   0   5   5   5]\n[  5  -5  -5  -5  -5  -5   0   5   5]\n[  5  -5  -5  -5  -5  -5  -5   0   5]\n[  5  -5  -5  -5  -5  -5  -5  -5   0]\n1\nWorks For 10\n[  0   5  -6   5  -5  -5  -5  -5  -5  -5]\n[ -5   0   5  -5   5   5   5   5   5   5]\n[  6  -5   0 -25   5   5   5   5   5   5]\n[ -5   5  25   0   5   5   5   5   5   5]\n[  5  -5  -5  -5   0   5   5   5   5   5]\n[  5  -5  -5  -5  -5   0   5   5   5   5]\n[  5  -5  -5  -5  -5  -5   0   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5   0   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5   0   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5   0]\n"},"1":{"name":"stdout","output_type":"stream","text":"1\nWorks For 11\n[  0   5  -6   5  -5  -5  -5  -5  -5  -5  -5]\n[ -5   0   5  -5   5   5   5   5   5   5   5]\n[  6  -5   0 -25   5   5   5   5   5   5   5]\n[ -5   5  25   0   5   5   5   5   5   5   5]\n[  5  -5  -5  -5   0   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5   0   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5   0   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5   0   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5   0   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5   0   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0]\n1\nWorks For 12\n[  0   5  -6   5  -5  -5  -5  -5  -5  -5  -5  -5]\n[ -5   0   5  -5   5   5   5   5   5   5   5   5]\n[  6  -5   0 -25   5   5   5   5   5   5   5   5]\n[ -5   5  25   0   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5   0   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5   0   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5   0   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5   0   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0]\n"},"2":{"name":"stdout","output_type":"stream","text":"1\nWorks For 13\n[  0   5  -6   5  -5  -5  -5  -5  -5  -5  -5  -5  -5]\n[ -5   0   5  -5   5   5   5   5   5   5   5   5   5]\n[  6  -5   0 -25   5   5   5   5   5   5   5   5   5]\n[ -5   5  25   0   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5   0   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5   0   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0]\n"},"3":{"name":"stdout","output_type":"stream","text":"1\nWorks For 14\n[  0   5  -6   5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5]\n[ -5   0   5  -5   5   5   5   5   5   5   5   5   5   5]\n[  6  -5   0 -25   5   5   5   5   5   5   5   5   5   5]\n[ -5   5  25   0   5   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5   0   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5   0   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0]\n"},"4":{"name":"stdout","output_type":"stream","text":"1\nWorks For 15\n[  0   5  -6   5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5]\n[ -5   0   5  -5   5   5   5   5   5   5   5   5   5   5   5]\n[  6  -5   0 -25   5   5   5   5   5   5   5   5   5   5   5]\n[ -5   5  25   0   5   5   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5   0   5   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5   0   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0]\n"},"5":{"name":"stdout","output_type":"stream","text":"1\nWorks For 16\n[  0   5  -6   5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5]\n[ -5   0   5  -5   5   5   5   5   5   5   5   5   5   5   5   5]\n[  6  -5   0 -25   5   5   5   5   5   5   5   5   5   5   5   5]\n[ -5   5  25   0   5   5   5   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5   0   5   5   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5   0   5   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0]\n"},"6":{"name":"stdout","output_type":"stream","text":"1\nWorks For 17\n[  0   5  -6   5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5]\n[ -5   0   5  -5   5   5   5   5   5   5   5   5   5   5   5   5   5]\n[  6  -5   0 -25   5   5   5   5   5   5   5   5   5   5   5   5   5]\n[ -5   5  25   0   5   5   5   5   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5   0   5   5   5   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5   0   5   5   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0]\n"},"7":{"name":"stdout","output_type":"stream","text":"1\nWorks For 18\n[  0   5  -6   5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5]\n[ -5   0   5  -5   5   5   5   5   5   5   5   5   5   5   5   5   5   5]\n[  6  -5   0 -25   5   5   5   5   5   5   5   5   5   5   5   5   5   5]\n[ -5   5  25   0   5   5   5   5   5   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5   0   5   5   5   5   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5   0   5   5   5   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0]\n"},"8":{"name":"stdout","output_type":"stream","text":"1\nWorks For 19\n[  0   5  -6   5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5]\n[ -5   0   5  -5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5]\n[  6  -5   0 -25   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5]\n[ -5   5  25   0   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5   0   5   5   5   5   5   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5   0   5   5   5   5   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0]\n"},"9":{"name":"stdout","output_type":"stream","text":"1\nWorks For 20\n[  0   5  -6   5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5]\n[ -5   0   5  -5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5]\n[  6  -5   0 -25   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5]\n[ -5   5  25   0   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5   0   5   5   5   5   5   5   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5   0   5   5   5   5   5   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0   5]\n[  5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5  -5   0]\nDone\n"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"404830","input":"load(\"quivers.sage\")\n## looking for 1 forkless part with both 3 cycles 0 non fork\n## done\n\nQ = Quiver(matrix(([0, 12, -2, -9],\n                   [-12, 0, -20, 15],\n                   [2, 20, 0, -25],\n                   [9, -15, 25, 0])))\ndisplayQuiver(Q.matrix)\nprint(isFork(Q.matrix))\nfor i in [1..4]:\n    print(isFork(Q.mutate([i]).matrix))","output":{"0":{"data":{"image/png":"f462d0215564139c8ed2d1244d5920e04ca46701","text/plain":"Graphics object consisting of 17 graphics primitives"},"exec_count":4,"output_type":"execute_result"},"1":{"name":"stdout","output_type":"stream","text":"0\n1\n2\n3\n4\n"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"4dd90b","input":"load(\"quivers.sage\")\n## trying to make a greater than 2 forkless part fork with onlly 3 cycles of 0 non forks\n\n# c>=b>=a\n\na = 4\nb = 4\nc = 5\nx = a\n\nQ = Quiver(matrix(([0, a, -c, c, -b],\n                   [-a, 0, b, x, c],\n                   [c, -b, 0, x, x],\n                   [-c, -1*x, -1*x, 0, a],\n                   [b, -c, -1*x, -a, 0])))\n\nprint(isFork(Q.matrix))\nG = forklessMutationGraph(Q.matrix,200)\nprint(G.average_degree())\nG.show(edge_labels=True, vertex_labels=False)\n\nfor i in [1..5]:\n    print(isFork(Q.mutate([i]).matrix))\n\n\n## definitely greater than 2 forkless part, dont know how this helps","output":{"0":{"name":"stdout","output_type":"stream","text":"0\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n"},"1":{"name":"stdout","output_type":"stream","text":"20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n"},"10":{"name":"stdout","output_type":"stream","text":"86\n87\n88\n89\n90\n"},"11":{"name":"stdout","output_type":"stream","text":"91\n92\n93\n94\n95\n"},"12":{"name":"stdout","output_type":"stream","text":"96\n97\n98\n99\n"},"13":{"name":"stdout","output_type":"stream","text":"100\n101\n102\n103\n"},"14":{"name":"stdout","output_type":"stream","text":"104\n105\n106\n107\n"},"15":{"name":"stdout","output_type":"stream","text":"108\n109\n110\n111\n"},"16":{"name":"stdout","output_type":"stream","text":"112\n113\n114\n115\n"},"17":{"name":"stdout","output_type":"stream","text":"116\n117\n118\n119\n"},"18":{"name":"stdout","output_type":"stream","text":"120\n121\n122\n123\n"},"19":{"name":"stdout","output_type":"stream","text":"124\n125\n126\n"},"2":{"name":"stdout","output_type":"stream","text":"34\n35\n36\n37\n38\n39\n40\n41\n"},"20":{"name":"stdout","output_type":"stream","text":"127\n128\n129\n130\n131\n"},"21":{"name":"stdout","output_type":"stream","text":"132\n133\n134\n"},"22":{"name":"stdout","output_type":"stream","text":"135\n136\n137\n"},"23":{"name":"stdout","output_type":"stream","text":"138\n139\n140\n"},"24":{"name":"stdout","output_type":"stream","text":"141\n142\n"},"25":{"name":"stdout","output_type":"stream","text":"143\n144\n145\n"},"26":{"name":"stdout","output_type":"stream","text":"146\n147\n148\n"},"27":{"name":"stdout","output_type":"stream","text":"149\n150\n151\n"},"28":{"name":"stdout","output_type":"stream","text":"152\n153\n"},"29":{"name":"stdout","output_type":"stream","text":"154\n155\n156\n"},"3":{"name":"stdout","output_type":"stream","text":"42\n43\n44\n45\n46\n47\n48\n49\n50\n"},"30":{"name":"stdout","output_type":"stream","text":"157\n"},"31":{"name":"stdout","output_type":"stream","text":"158\n159\n"},"32":{"name":"stdout","output_type":"stream","text":"160\n161\n162\n"},"33":{"name":"stdout","output_type":"stream","text":"163\n164\n165\n"},"34":{"name":"stdout","output_type":"stream","text":"166\n167\n168\n"},"35":{"name":"stdout","output_type":"stream","text":"169\n170\n171\n"},"36":{"name":"stdout","output_type":"stream","text":"172\n"},"37":{"name":"stdout","output_type":"stream","text":"173\n174\n"},"38":{"name":"stdout","output_type":"stream","text":"175\n176\n177\n"},"39":{"name":"stdout","output_type":"stream","text":"178\n179\n"},"4":{"name":"stdout","output_type":"stream","text":"51\n52\n53\n54\n55\n56\n57\n58\n"},"40":{"name":"stdout","output_type":"stream","text":"180\n181\n"},"41":{"name":"stdout","output_type":"stream","text":"182\n183\n"},"42":{"name":"stdout","output_type":"stream","text":"184\n185\n"},"43":{"name":"stdout","output_type":"stream","text":"186\n187\n"},"44":{"name":"stdout","output_type":"stream","text":"188\n189\n190\n"},"45":{"name":"stdout","output_type":"stream","text":"191\n192\n"},"46":{"name":"stdout","output_type":"stream","text":"193\n"},"47":{"name":"stdout","output_type":"stream","text":"194\n195\n"},"48":{"name":"stdout","output_type":"stream","text":"196\n197\n"},"49":{"name":"stdout","output_type":"stream","text":"198\n199\n"},"5":{"name":"stdout","output_type":"stream","text":"59\n60\n61\n62\n63\n64\n65\n"},"50":{"name":"stdout","output_type":"stream","text":"200\n800/401\n"},"51":{"data":{"image/png":"fe21be0e8e1217c7e9ae362113ede79f3096796d","text/plain":"Graphics object consisting of 801 graphics primitives"},"exec_count":4,"output_type":"execute_result"},"52":{"name":"stdout","output_type":"stream","text":"1\n2\n0\n0\n5\n"},"6":{"name":"stdout","output_type":"stream","text":"66\n67\n68\n69\n70\n71\n"},"7":{"name":"stdout","output_type":"stream","text":"72\n73\n74\n75\n76\n77\n"},"8":{"name":"stdout","output_type":"stream","text":"78\n79\n80\n"},"9":{"name":"stdout","output_type":"stream","text":"81\n82\n83\n84\n85\n"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"cf65b8","input":"#trying to see if 4 node 1 forkless part generalizes to all 3 0-forkless\n# turns out is does, easy to brute force prove\n# good code to keep for later\n\nload(\"quivers.sage\")\n## looking for 1 forkless part with both 3 cycles 0 non fork\n## done\n\n#the 0 forkless sides in ascending order, want small name\na = [1000,1000,1001]\n\nQ = Quiver(matrix(([0, a[0]*a[1], -2, -1*a[0]*a[0]],\n                   [-1*a[0]*a[1], 0, -1*a[1]*a[2], a[2]*a[2]],\n                   [2, a[1]*a[2], 0, -1*a[2]*a[2]],\n                   [a[0]*a[0], -1*a[2]*a[2], a[2]*a[2], 0])))\nprint(Q.matrix)\nprint(isFork(Q.matrix))\nfor i in [1..4]:\n    print(isFork(Q.mutate([i]).matrix))","output":{"0":{"name":"stdout","output_type":"stream","text":"[       0  1000000       -2 -1000000]\n[-1000000        0 -1001000  1002001]\n[       2  1001000        0 -1002001]\n[ 1000000 -1002001  1002001        0]\n0\n1\n2\n3\n4\n"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"cfd2b0","input":"#trying on 6 nodes\n# difference is can try 'share' with only 2 of the 0 forkless and leave number 3 untouched, thus may not be as easy\n    # this was actually unachievable in my testing, may be impossible to only induce a few cycle\n# may want to make construction of only 0 forkless parts into 1 forkless\n    # trying but hard to fit acyclic criteria, easy to get inequality case esp if all 3 cycles are 0 forkless part\n    # how to enforce no cycles\n\n#trying to see if 5 node 1 forkless part form like above\n\n\nload(\"quivers.sage\")\n## looking for 1 forkless part with both 3 cycles 0 non fork\n## done\n\n#the 0 forkless sides in ascending order, want small name\na = [4,5,10]\n\nQ = Quiver(matrix(([0, a[0]*a[1], -2, -1*a[0]*a[0], a[0], -1*a[1]],\n                   [-1*a[0]*a[1], 0, -1*a[1]*a[2], a[0]*a[2], -1*a[2]*a[2], -1*a[0]*a[0]],\n                   [2, a[1]*a[2], 0, -1*a[2]*a[2], a[0], -1*a[1]],\n                   [a[0]*a[0], -1*a[0]*a[2], a[2]*a[2], 0, a[1]*a[2], a[0]*a[1]],\n                   [-1*a[0], a[2]*a[2], -1*a[0], -1*a[1]*a[2], 0, -1*a[2]],\n                   [a[1],a[0]*a[0], a[1], -1*a[0]*a[1], a[2], 0])))\n# print(Q.matrix)\nprint(isFork(Q.matrix))\nfor i in [1..6]:\n    print(isFork(Q.mutate([i]).matrix))","output":{"0":{"name":"stdout","output_type":"stream","text":"0\n1\n2\n3\n4\n5\n6\n"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"fda009","input":"load(\"quivers.sage\")\n\n## think the 1 forkless part due to iso morphism are special cases of something\n## idk what I was trying to show here, ignore this\nn = 5\nm = 2\nmp = 5\nQ = Quiver(matrix(([0, n,-m,m,-n,n],\n                   [-n,0, n,-m,m,-n],\n                   [m,-n, 0,n,-m,m],\n                   [-m,m,-n,0, n,-m],\n                   [n,-m,m,-n,0, n],\n                   [-n,n,-m,m,-n, 0])))\n\nprint(isFork(Q.matrix))\nfor i in [1..6]:\n    print(isFork(Q.mutate([i]).matrix))","output":{"0":{"name":"stdout","output_type":"stream","text":"0\n0\n0\n0\n0\n0\n0\n"}},"pos":0,"type":"cell"}
{"id":0,"time":1710865174180,"type":"user"}
{"last_load":1710865173064,"type":"file"}